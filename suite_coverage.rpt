datasets:
  all_fregs:
    f0: 0
    f1: 0
    f10: 0
    f11: 0
    f12: 0
    f13: 0
    f14: 0
    f15: 0
    f16: 0
    f17: 0
    f18: 0
    f19: 0
    f2: 0
    f20: 0
    f21: 0
    f22: 0
    f23: 0
    f24: 0
    f25: 0
    f26: 0
    f27: 0
    f28: 0
    f29: 0
    f3: 0
    f30: 0
    f31: 0
    f4: 0
    f5: 0
    f6: 0
    f7: 0
    f8: 0
    f9: 0
  all_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  base_rs1val_sgn:
    rs1_val == (-2**(xlen-1)): 0
    rs1_val == (2**(xlen-1)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs1val_unsgn:
    rs1_val == (2**(xlen)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs2val_sgn:
    rs2_val == (-2**(xlen-1)): 0
    rs2_val == (2**(xlen-1)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs2val_unsgn:
    rs2_val == (2**(xlen)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs3val_sgn:
    rs3_val == (-2**(xlen-1)): 0
    rs3_val == (2**(xlen-1)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  base_rs3val_unsgn:
    rs3_val == (2**(xlen)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  bfmt_base_branch_val_align_sgn:
    rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
  bfmt_base_branch_val_align_unsgn:
    rs1_val > 0 and rs2_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val > 0 ': 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val < 0: 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val > 0 ': 0
  c_regs:
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x8: 0
    x9: 0
  cbfmt_immval_sgn:
    imm_val == (-2**(6-1)): 0
    imm_val == (2**(6-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  cbimm_val_walking:
    alternate("imm_val",6): 0
    walking_ones("imm_val", 6): 0
    walking_zeros("imm_val", 6): 0
  crfmt_val_comb_sgn:
    rs2_val < 0: 0
    rs2_val > 0: 0
  ifmt_base_immval_sgn:
    imm_val == (-2**(12-1)): 0
    imm_val == (2**(12-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_sgn_len:
    imm_val == (-2**(ceil(log(xlen,2))-1)): 0
    imm_val == (2**(ceil(log(xlen,2))-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn:
    imm_val == (2**(12)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn_len_sub_3:
    imm_val == (2**(ceil(log(xlen,2))-3)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_shift:
    rs1_val < 0 and imm_val == (xlen-1): 0
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val > 0 and imm_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < xlen: 0
    rs1_val > 0 and imm_val == (xlen-1): 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val > 0 and imm_val < xlen: 0
  ifmt_base_shift_32w:
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val == 31: 0
    rs1_val < 0 and imm_val > 0 and imm_val < 32: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < 32: 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val == 31: 0
    rs1_val > 0 and imm_val > 0 and imm_val < 32: 0
  ifmt_immval_walking:
    alternate("imm_val",12): 0
    walking_ones("imm_val", 12): 0
    walking_zeros("imm_val", 12): 0
  ifmt_immval_walking_5u:
    alternate("imm_val", 5, False): 0
    walking_ones("imm_val", 5, False): 0
    walking_zeros("imm_val", 5, False): 0
  ifmt_immval_walking_len:
    alternate("imm_val",ceil(log(xlen,2)), False): 0
    walking_ones("imm_val", ceil(log(xlen,2)), False): 0
    walking_zeros("imm_val", ceil(log(xlen,2)), False): 0
  ifmt_immval_walking_len_sub_3:
    alternate("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_ones("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_zeros("imm_val", ceil(log(xlen,2))-3, False): 0
  ifmt_immval_walking_unsgn:
    alternate("imm_val",12,False): 0
    walking_ones("imm_val", 12,False): 0
    walking_zeros("imm_val", 12,False): 0
  ifmt_op_comb:
    rs1 != rd: 0
    rs1 == rd: 0
  ifmt_val_comb_sgn:
    rs1_val != imm_val: 0
    rs1_val < 0 and imm_val < 0: 0
    rs1_val < 0 and imm_val > 0: 0
    rs1_val == imm_val: 0
    rs1_val > 0 and imm_val < 0: 0
    rs1_val > 0 and imm_val > 0: 0
  ifmt_val_comb_unsgn:
    rs1_val != imm_val and rs1_val > 0 and imm_val > 0: 0
    rs1_val == imm_val and rs1_val > 0 and imm_val > 0: 0
  pair_regs:
    x10: 0
    x12: 0
    x14: 0
    x16: 0
    x18: 0
    x2: 0
    x20: 0
    x22: 0
    x24: 0
    x26: 0
    x28: 0
    x30: 0
    x4: 0
    x6: 0
    x8: 0
  r4fmt_op_comb:
    rd == rs2 == rs3 != rs1: 0
    rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd: 0
    rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2: 0
    rs1 == rd == rs3 != rs2: 0
    rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3: 0
    rs1 == rs2 == rd != rs3: 0
    rs1 == rs2 == rs3 != rd: 0
    rs1 == rs2 == rs3 == rd: 0
    rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2: 0
    rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1: 0
    rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1: 0
    rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1: 0
  rfmt_base_shift:
    rs1_val < 0 and rs2_val == 0: 0
    rs1_val < 0 and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val > 0 and rs2_val == 0: 0
    rs1_val > 0 and rs2_val > 0 and rs2_val < xlen: 0
  rfmt_op_comb:
    rd == "x0" != rs1: 0
    rs1 != rs2  and rs1 != rd and rs2 != rd: 0
    rs1 == "x0" != rd: 0
    rs1 == rd != rs2 and rd != "x0": 0
    rs1 == rd != rs2 and rd == "x0": 0
    rs1 == rs2 != rd: 0
    rs1 == rs2 == rd: 0
    rs2 == rd != rs1: 0
  rfmt_val_comb_sgn:
    rs1_val != rs2_val: 0
    rs1_val < 0 and rs2_val < 0: 0
    rs1_val < 0 and rs2_val > 0: 0
    rs1_val == rs2_val: 0
    rs1_val > 0 and rs2_val < 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rfmt_val_comb_unsgn:
    rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rs1val_walking:
    alternate("rs1_val",xlen): 0
    walking_ones("rs1_val", xlen): 0
    walking_zeros("rs1_val", xlen): 0
  rs1val_walking_unsgn:
    alternate("rs1_val",xlen,False): 0
    walking_ones("rs1_val", xlen,False): 0
    walking_zeros("rs1_val", xlen,False): 0
  rs2val_walking:
    alternate("rs2_val",xlen): 0
    walking_ones("rs2_val", xlen): 0
    walking_zeros("rs2_val", xlen): 0
  rs2val_walking_unsgn:
    alternate("rs2_val",xlen,False): 0
    walking_ones("rs2_val", xlen,False): 0
    walking_zeros("rs2_val", xlen,False): 0
  rs3val_walking:
    alternate("rs3_val",xlen): 0
    walking_ones("rs3_val", xlen): 0
    walking_zeros("rs3_val", xlen): 0
  rv32e_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rvp64_rs1val_sgn:
    rs1_val == (-2**63): 0
    rs1_val == (2**63-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_unsgn:
    rs1_val == (2**64-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_walking_sgn:
    alternate("rs1_val",64): 0
    walking_ones("rs1_val", 64): 0
    walking_zeros("rs1_val", 64): 0
  rvp64_rs1val_walking_unsgn:
    alternate("rs1_val",64, signed=False): 0
    walking_ones("rs1_val", 64, signed=False): 0
    walking_zeros("rs1_val", 64, signed=False): 0
  rvp64_rs2val_sgn:
    rs2_val == (-2**63): 0
    rs2_val == (2**63-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_unsgn:
    rs2_val == (2**64-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_walking_sgn:
    alternate("rs2_val",64): 0
    walking_ones("rs2_val", 64): 0
    walking_zeros("rs2_val", 64): 0
  rvp64_rs2val_walking_unsgn:
    alternate("rs2_val",64, signed=False): 0
    walking_ones("rs2_val", 64, signed=False): 0
    walking_zeros("rs2_val", 64, signed=False): 0
  sfmt_op_comb:
    rs1 != rs2: 0
    rs1 == rs2: 0
pmp_NA4_R:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 70
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 3
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 19
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 98
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 81
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 81
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 81
    (read_csr("mcause") != 0x00000005): 98
    (read_csr("mcause") == 0x00000001): 3
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 42
    lw: 179
    sw: 103
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 8) & 0x9F == 0x91) and (rs1_val + imm_val == (pmpaddr1 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_NA4_RW:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 80
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 80
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 3
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 89
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 52
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 52
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 52
    (read_csr("mcause") != 0x00000005): 89
    (read_csr("mcause") != 0x00000007): 89
    (read_csr("mcause") == 0x00000001): 3
    coverage: 12/12
  mnemonics:
    csrrs: 36
    csrrw: 53
    lw: 110
    sw: 67
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 8) & 0x9F == 0x93) and (rs1_val + imm_val == (pmpaddr1 << 2)): 9
    coverage: 1/1
  total_coverage: 17/17
pmp_NA4_RWX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 34
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 34
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 34
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 43
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 26
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 26
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 26
    (read_csr("mcause") != 0x00000001): 43
    (read_csr("mcause") != 0x00000005): 43
    (read_csr("mcause") != 0x00000007): 43
    coverage: 12/12
  mnemonics:
    csrrs: 19
    csrrw: 24
    lw: 38
    sw: 31
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 8) & 0x9F == 0x97) and (rs1_val + imm_val == (pmpaddr1 << 2)): 9
    coverage: 1/1
  total_coverage: 17/17
pmp_NA4_RX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 44
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 44
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 19
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 72
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 55
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 55
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 55
    (read_csr("mcause") != 0x00000001): 72
    (read_csr("mcause") != 0x00000005): 72
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 36
    csrrw: 33
    lw: 107
    sw: 67
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 8) & 0x9F == 0x95) and (rs1_val + imm_val == (pmpaddr1 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_NA4_X:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 54
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 101
    ((pmpcfg0 >> 8) & 0x99) == 0x90: 84
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 84
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 84
    (read_csr("mcause") != 0x00000001): 101
    (read_csr("mcause") == 0x00000005): 3
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 42
    lw: 179
    sw: 103
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 8) & 0x9F == 0x94) and (rs1_val + imm_val == (pmpaddr1 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_NAPOT_R:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 96
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 6
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 19
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 124
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 107
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 107
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 107
    (read_csr("mcause") != 0x00000005): 124
    (read_csr("mcause") == 0x00000001): 6
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 70
    csrrw: 51
    lw: 251
    sw: 139
    coverage: 4/4
  val_comb:
    ? ((pmpcfg0 >> 8) & 0x9F == 0x99) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and
      (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3)))
      + 1)))
    : 6
    coverage: 1/1
  total_coverage: 17/17
pmp_NAPOT_RW:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 86
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 86
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 6
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 95
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 78
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 78
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 78
    (read_csr("mcause") != 0x00000005): 95
    (read_csr("mcause") != 0x00000007): 95
    (read_csr("mcause") == 0x00000001): 6
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 42
    lw: 182
    sw: 103
    coverage: 4/4
  val_comb:
    ? ((pmpcfg0 >> 8) & 0x9F == 0x9B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and
      (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3)))
      + 1)))
    : 9
    coverage: 1/1
  total_coverage: 17/17
pmp_NAPOT_RWX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 34
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 34
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 34
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 43
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 26
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 26
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 26
    (read_csr("mcause") != 0x00000001): 43
    (read_csr("mcause") != 0x00000005): 43
    (read_csr("mcause") != 0x00000007): 43
    coverage: 12/12
  mnemonics:
    csrrs: 19
    csrrw: 24
    lw: 38
    sw: 31
    coverage: 4/4
  val_comb:
    ? ((pmpcfg0 >> 8) & 0x9F == 0x9F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and
      (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3)))
      + 1)))
    : 9
    coverage: 1/1
  total_coverage: 17/17
pmp_NAPOT_RX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 72
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 72
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 2
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 20
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 110
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 74
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 74
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 74
    (read_csr("mcause") != 0x00000001): 110
    (read_csr("mcause") != 0x00000005): 110
    (read_csr("mcause") == 0x00000007): 5
    coverage: 12/12
  mnemonics:
    csrrs: 46
    csrrw: 59
    lw: 160
    sw: 109
    coverage: 4/4
  val_comb:
    ? ((pmpcfg0 >> 8) & 0x9F == 0x9D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and
      (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3)))
      + 1)))
    : 5
    coverage: 1/1
  total_coverage: 17/17
pmp_NAPOT_X:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 54
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 101
    ((pmpcfg0 >> 8) & 0x99) == 0x98: 84
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 84
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 84
    (read_csr("mcause") != 0x00000001): 101
    (read_csr("mcause") == 0x00000005): 3
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 42
    lw: 179
    sw: 103
    coverage: 4/4
  val_comb:
    ? ((pmpcfg0 >> 8) & 0x9F == 0x9C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and
      (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3)))
      + 1)))
    : 6
    coverage: 1/1
  total_coverage: 17/17
pmp_TOR_R:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 71
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 3
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 19
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 99
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 81
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 81
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 81
    (read_csr("mcause") != 0x00000005): 99
    (read_csr("mcause") == 0x00000001): 3
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 43
    lw: 179
    sw: 103
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 16) & 0x9F == 0x89) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_TOR_RW:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 61
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 61
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001): 3
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 70
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 52
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 52
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 52
    (read_csr("mcause") != 0x00000005): 70
    (read_csr("mcause") != 0x00000007): 70
    (read_csr("mcause") == 0x00000001): 3
    coverage: 12/12
  mnemonics:
    csrrs: 36
    csrrw: 34
    lw: 110
    sw: 67
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 16) & 0x9F == 0x8B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2)): 9
    coverage: 1/1
  total_coverage: 17/17
pmp_TOR_RWX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 35
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 35
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007): 35
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 9
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007): 9
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 44
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 26
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 26
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 26
    (read_csr("mcause") != 0x00000001): 44
    (read_csr("mcause") != 0x00000005): 44
    (read_csr("mcause") != 0x00000007): 44
    coverage: 12/12
  mnemonics:
    csrrs: 19
    csrrw: 25
    lw: 38
    sw: 31
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 16) & 0x9F == 0x8F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2)): 9
    coverage: 1/1
  total_coverage: 17/17
pmp_TOR_RX:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 45
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005): 45
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005): 19
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 73
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 55
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 55
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 55
    (read_csr("mcause") != 0x00000001): 73
    (read_csr("mcause") != 0x00000005): 73
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 36
    csrrw: 34
    lw: 107
    sw: 67
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 16) & 0x9F == 0x8D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_TOR_X:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  csr_comb:
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001): 55
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005): 1
    ((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007): 1
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 102
    ((pmpcfg0 >> 16) & 0x99) == 0x88: 84
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 84
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 84
    (read_csr("mcause") != 0x00000001): 102
    (read_csr("mcause") == 0x00000005): 3
    (read_csr("mcause") == 0x00000007): 3
    coverage: 12/12
  mnemonics:
    csrrs: 53
    csrrw: 43
    lw: 179
    sw: 103
    coverage: 4/4
  val_comb:
    ((pmpcfg0 >> 16) & 0x9F == 0x8C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2)): 6
    coverage: 1/1
  total_coverage: 17/17
pmp_access_permission:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  csr_comb:
    (mstatus & 0x1800 != 0x0800) and ((old("pmpaddr0")) ^ (pmpaddr0) != 0x00): 1
    (mstatus & 0x1800 != 0x0800) and ((old("pmpcfg0")) ^ (pmpcfg0) != 0x00): 2
    mstatus   &  0x1800 == 0x000 and (read_csr("mcause") == 0x00000002): 2
    mstatus   &  0x1800 == 0x800 and (read_csr("mcause") == 0x00000002): 2
    coverage: 4/4
  mnemonics:
    csrrs: 65
    csrrw: 42
    sw: 99
    coverage: 3/3
  total_coverage: 7/7
pmp_cfg_locked_write_unrelated:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  csr_comb:
    (pmpcfg0    & 0x80 == 0x80) and (old("pmpaddr0")) ^ (pmpaddr0) == 0x00: 60
    (pmpcfg0    & 0x80 == 0x80) and (old("pmpcfg0") & 0xFF) ^ (pmpcfg0 & 0xFF) == 0x00: 59
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpaddr2")) ^ (pmpaddr2) == 0x00: 60
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<16)) ^ (pmpcfg0 & (0xFF<<16)) == 0x00: 59
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpaddr3")) ^ (pmpaddr3) == 0x00: 60
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<24)) ^ (pmpcfg0 & (0xFF<<24)) == 0x00: 59
    (pmpcfg0>>8 & 0x80 == 0x80) and (old("pmpaddr1")) ^ (pmpaddr1) == 0x00: 60
    (pmpcfg0>>8 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<8)) ^ (pmpcfg0 & (0xFF<<8)) == 0x00: 59
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpaddr4")) ^ (pmpaddr4) == 0x00: 48
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpcfg1") & 0xFF) ^ (pmpcfg1 & 0xFF) == 0x00: 47
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpaddr6")) ^ (pmpaddr6) == 0x00: 48
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<16)) ^ (pmpcfg1 & (0xFF<<16)) == 0x00: 47
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpaddr7")) ^ (pmpaddr7) == 0x00: 48
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<24)) ^ (pmpcfg1 & (0xFF<<24)) == 0x00: 47
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpaddr5")) ^ (pmpaddr5) == 0x00: 48
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<8)) ^ (pmpcfg1 & (0xFF<<8)) == 0x00: 47
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpaddr8")) ^ (pmpaddr8) == 0x00: 36
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpcfg2") & 0xFF) ^ (pmpcfg2 & 0xFF) == 0x00: 35
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpaddr10")) ^ (pmpaddr10) == 0x00: 36
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<16)) ^ (pmpcfg2 & (0xFF<<16)) == 0x00: 35
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpaddr11")) ^ (pmpaddr11) == 0x00: 36
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<24)) ^ (pmpcfg2 & (0xFF<<24)) == 0x00: 35
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpaddr9")) ^ (pmpaddr9) == 0x00: 36
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<8)) ^ (pmpcfg2 & (0xFF<<8)) == 0x00: 35
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpaddr12")) ^ (pmpaddr12) == 0x00: 24
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpcfg3") & 0xFF) ^ (pmpcfg3 & 0xFF) == 0x00: 23
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpaddr14")) ^ (pmpaddr14) == 0x00: 24
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<16)) ^ (pmpcfg3 & (0xFF<<16)) == 0x00: 23
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpaddr15")) ^ (pmpaddr15) == 0x00: 24
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<24)) ^ (pmpcfg3 & (0xFF<<24)) == 0x00: 23
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpaddr13")) ^ (pmpaddr13) == 0x00: 24
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<8)) ^ (pmpcfg3 & (0xFF<<8)) == 0x00: 23
    coverage: 32/32
  mnemonics:
    csrrs: 33
    csrrw: 38
    coverage: 2/2
  total_coverage: 34/34
