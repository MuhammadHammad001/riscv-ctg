# *- Write to pmpcfg with L=1 and check that:
# *- Writes are ignored
# *- Writes to other, unrelated entries in the same CSR are not ignored"
pmp_cfg_locked_write_unrelated:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
  csr_comb:
    (pmpcfg0    & 0x80 == 0x80) and (old("pmpcfg0") & 0xFF) ^ (pmpcfg0 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg0    & 0x80 == 0x80) and (old("pmpaddr0")) ^ (pmpaddr0) == 0x00: 0   #any other write ignored
    (pmpcfg0>>8 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<8)) ^ (pmpcfg0 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg0>>8 & 0x80 == 0x80) and (old("pmpaddr1")) ^ (pmpaddr1) == 0x00: 0   #any other write ignored
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<16)) ^ (pmpcfg0 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpaddr2")) ^ (pmpaddr2) == 0x00: 0   #any other write ignored
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<24)) ^ (pmpcfg0 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpaddr3")) ^ (pmpaddr3) == 0x00: 0   #any other write ignored
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpcfg1") & 0xFF) ^ (pmpcfg1 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpaddr4")) ^ (pmpaddr4) == 0x00: 0   #any other write ignored
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<8)) ^ (pmpcfg1 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpaddr5")) ^ (pmpaddr5) == 0x00: 0   #any other write ignored
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<16)) ^ (pmpcfg1 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpaddr6")) ^ (pmpaddr6) == 0x00: 0   #any other write ignored
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<24)) ^ (pmpcfg1 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpaddr7")) ^ (pmpaddr7) == 0x00: 0   #any other write ignored
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpcfg2") & 0xFF) ^ (pmpcfg2 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpaddr8")) ^ (pmpaddr8) == 0x00: 0   #any other write ignored
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<8)) ^ (pmpcfg2 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpaddr9")) ^ (pmpaddr9) == 0x00: 0   #any other write ignored
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<16)) ^ (pmpcfg2 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpaddr10")) ^ (pmpaddr10) == 0x00: 0   #any other write ignored
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<24)) ^ (pmpcfg2 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpaddr11")) ^ (pmpaddr11) == 0x00: 0   #any other write ignored
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpcfg3") & 0xFF) ^ (pmpcfg3 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpaddr12")) ^ (pmpaddr12) == 0x00: 0   #any other write ignored
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<8)) ^ (pmpcfg3 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpaddr13")) ^ (pmpaddr13) == 0x00: 0   #any other write ignored
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<16)) ^ (pmpcfg3 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpaddr14")) ^ (pmpaddr14) == 0x00: 0   #any other write ignored
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<24)) ^ (pmpcfg3 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpaddr15")) ^ (pmpaddr15) == 0x00: 0   #any other write ignored
# #------------------------------------------------------------------------------
# #PMP Permission. Check csrrw. csrrs and csrrc in all 3 modes
# # *No exception in Machine mode
# # *Page 57 -- pmp csrs accessible only in M mode. So, exception in Supervisor mode
# # *Page 57 -- pmp csrs accessible only in M mode. So, exception in User mode
pmp_access_permission:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw : 0
    csrrs : 0
    sw    : 0
  csr_comb:
    (mstatus & 0x1800 != 0x0800) and ((old("pmpcfg0")) ^ (pmpcfg0) != 0x00): 0   #any other write ignored
    (mstatus & 0x1800 != 0x0800) and ((old("pmpaddr0")) ^ (pmpaddr0) != 0x00): 0   #any other write ignored
    'mstatus   &  0x1800 == 0x800 and (read_csr("mcause") == 0x00000002)' : 0 #Start of mtrap_sigptr
    'mstatus   &  0x1800 == 0x000 and (read_csr("mcause") == 0x00000002)' : 0 #Start of mtrap_sigptr
pmp_NA4_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    #No exception in M Mode
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    #No exception in S and U Mode
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    #address should be in range of PMP
    '((pmpcfg0 >> 8) & 0x9F == 0x97) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0
pmp_NAPOT_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x93) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0
pmp_TOR_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x91) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0
pmp_NAPOT_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x99) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x89) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x90: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x94) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x98: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x88: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x95) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0