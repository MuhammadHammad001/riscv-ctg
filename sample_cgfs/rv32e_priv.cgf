misalign-lh:
  cond: check ISA:=regex(.*E.*Zicsr.*) ;def RVTEST_E = True
  config:
    - check ISA:=regex(.*E.*); check hw_data_misaligned_support:=True ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True ;def RVTEST_E = True
  opcode:
    lh: 0
  val_comb:
    'ea_align == 1': 0

misalign-lhu:
  config:
    - check ISA:=regex(.*E.*); check hw_data_misaligned_support:=True ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*Zicsr.*) ;def RVTEST_E = True
  opcode:
    lhu: 0
  val_comb:
    'ea_align == 1': 0


misalign-lw:
  config:
    - check ISA:=regex(.*E.*); check hw_data_misaligned_support:=True ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*Zicsr.*) ;def RVTEST_E = True
  opcode:
    lw: 0
  val_comb:
    'ea_align == 1': 0
    'ea_align == 2': 0
    'ea_align == 3': 0

misalign-sh:
  config:
    - check ISA:=regex(.*E.*); check hw_data_misaligned_support:=True ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*Zicsr.*) ;def RVTEST_E = True
  opcode:
    sh: 0
  val_comb:
    'ea_align == 1': 0

misalign-sw:
  config:
    - check ISA:=regex(.*E.*); check hw_data_misaligned_support:=True ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check hw_data_misaligned_support:=False; def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*Zicsr.*) ;def RVTEST_E = True
  opcode:
    sw: 0
  val_comb:
    'ea_align == 1': 0
    'ea_align == 2': 0
    'ea_align == 3': 0

misalign2-jalr:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    jalr: 0
  val_comb:
    'imm_val%2 == 1 and ea_align == 2': 0
    'imm_val%2 == 0 and ea_align == 2': 0

misalign1-jalr:
  config: 
    - check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    jalr: 0
  val_comb:
    'imm_val%2 == 1 and ea_align == 1': 0
    'imm_val%2 == 0 and ea_align == 1': 0

misalign-jal:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    jal: 0
  val_comb:
    'ea_align == 2': 0

misalign-bge:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    bge: 0
  val_comb:
    ' rs1_val>rs2_val and ea_align == 2': 0

misalign-bgeu:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True 
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    bgeu: 0
  val_comb:
    ' rs1_val>rs2_val and ea_align == 2': 0

misalign-blt:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    blt: 0
  val_comb:
    ' rs1_val<rs2_val and ea_align == 2': 0

misalign-bltu:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    bltu: 0
  val_comb:
    ' rs1_val<rs2_val and ea_align == 2': 0

misalign-bne:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    bne: 0
  val_comb:
    ' rs1_val!=rs2_val and ea_align == 2': 0

misalign-beq:
  config:
    - check ISA:=regex(.*E.*C.*) ;def RVTEST_E = True
    - check ISA:=regex(.*E.*Zicsr.*); check ISA:=regex(^[^C]+$); def rvtest_mtrap_routine=True ;def RVTEST_E = True
  cond: check ISA:=regex(.*E.*) ;def RVTEST_E = True
  opcode:
    beq: 0
  val_comb:
    ' rs1_val==rs2_val and ea_align == 2': 0


